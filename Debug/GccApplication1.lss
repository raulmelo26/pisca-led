
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  00000944  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000974  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f0f  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c1  00000000  00000000  000019eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000097e  00000000  00000000  000023ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  00002d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065f  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000649  00000000  00000000  000036d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003d20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__vector_12>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 ed       	ldi	r30, 0xD0	; 208
  84:	f8 e0       	ldi	r31, 0x08	; 8
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ab 30       	cpi	r26, 0x0B	; 11
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 88 01 	call	0x310	; 0x310 <main>
  a6:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <HC595_init>:
}

void HC595_xorPin(uint8_t pin) {
	registerData ^= (1 <<  pin);
	HC595_write(registerData);
}
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	88 e2       	ldi	r24, 0x28	; 40
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	28 e2       	ldi	r18, 0x28	; 40
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	f9 01       	movw	r30, r18
  c0:	20 81       	ld	r18, Z
  c2:	20 63       	ori	r18, 0x30	; 48
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
  c8:	80 e3       	ldi	r24, 0x30	; 48
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	20 e3       	ldi	r18, 0x30	; 48
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	20 81       	ld	r18, Z
  d4:	20 64       	ori	r18, 0x40	; 64
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
  da:	00 00       	nop
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <HC595_pulse>:
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	89 e2       	ldi	r24, 0x29	; 41
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	29 e2       	ldi	r18, 0x29	; 41
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	20 61       	ori	r18, 0x10	; 16
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
  fc:	89 e2       	ldi	r24, 0x29	; 41
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	29 e2       	ldi	r18, 0x29	; 41
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	20 81       	ld	r18, Z
 108:	2f 7e       	andi	r18, 0xEF	; 239
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
 10e:	00 00       	nop
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <HC595_latch>:
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	81 e3       	ldi	r24, 0x31	; 49
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	21 e3       	ldi	r18, 0x31	; 49
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	f9 01       	movw	r30, r18
 128:	20 81       	ld	r18, Z
 12a:	20 64       	ori	r18, 0x40	; 64
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
 130:	81 e3       	ldi	r24, 0x31	; 49
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	21 e3       	ldi	r18, 0x31	; 49
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	2f 7b       	andi	r18, 0xBF	; 191
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
 142:	00 00       	nop
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <HC595_setPin>:
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	1f 92       	push	r1
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	89 83       	std	Y+1, r24	; 0x01
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	28 2f       	mov	r18, r24
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <HC595_setPin+0x1c>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	2a 95       	dec	r18
 168:	e2 f7       	brpl	.-8      	; 0x162 <HC595_setPin+0x18>
 16a:	98 2f       	mov	r25, r24
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 170:	89 2b       	or	r24, r25
 172:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 17a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <HC595_write>
 17e:	00 00       	nop
 180:	0f 90       	pop	r0
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <HC595_clrPin>:
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	1f 92       	push	r1
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	28 2f       	mov	r18, r24
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <HC595_clrPin+0x1c>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	2a 95       	dec	r18
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <HC595_clrPin+0x18>
 1a8:	80 95       	com	r24
 1aa:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_end>
 1ae:	89 23       	and	r24, r25
 1b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 1b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1b8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <HC595_write>
 1bc:	00 00       	nop
 1be:	0f 90       	pop	r0
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <HC595_write>:

void HC595_write(uint8_t data) {
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <HC595_write+0x6>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	8a 83       	std	Y+2, r24	; 0x02
   //Send each 8 bits serially

   //Order is MSB first
   for(uint8_t i=0;i<8;i++)
 1d2:	19 82       	std	Y+1, r1	; 0x01
 1d4:	1e c0       	rjmp	.+60     	; 0x212 <HC595_write+0x4c>
   {
      //Output the data on DS line according to the
      //Value of MSB
      if(data & 0b10000000)
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	88 23       	and	r24, r24
 1da:	54 f4       	brge	.+20     	; 0x1f0 <HC595_write+0x2a>
      {
         //MSB is 1 so output high

         HC595DataHigh();
 1dc:	89 e2       	ldi	r24, 0x29	; 41
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	29 e2       	ldi	r18, 0x29	; 41
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	f9 01       	movw	r30, r18
 1e6:	20 81       	ld	r18, Z
 1e8:	20 62       	ori	r18, 0x20	; 32
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
 1ee:	09 c0       	rjmp	.+18     	; 0x202 <HC595_write+0x3c>
      }
      else
      {
         //MSB is 0 so output high
         HC595DataLow();
 1f0:	89 e2       	ldi	r24, 0x29	; 41
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	29 e2       	ldi	r18, 0x29	; 41
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	f9 01       	movw	r30, r18
 1fa:	20 81       	ld	r18, Z
 1fc:	2f 7d       	andi	r18, 0xDF	; 223
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
      }

      HC595_pulse();  //Pulse the Clock line
 202:	0e 94 71 00 	call	0xe2	; 0xe2 <HC595_pulse>
      data=data<<1;  //Now bring next bit at MSB position
 206:	8a 81       	ldd	r24, Y+2	; 0x02
 208:	88 0f       	add	r24, r24
 20a:	8a 83       	std	Y+2, r24	; 0x02

void HC595_write(uint8_t data) {
   //Send each 8 bits serially

   //Order is MSB first
   for(uint8_t i=0;i<8;i++)
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	89 83       	std	Y+1, r24	; 0x01
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	88 30       	cpi	r24, 0x08	; 8
 216:	f8 f2       	brcs	.-66     	; 0x1d6 <HC595_write+0x10>

   }

   //Now all 8 bits have been transferred to shift register
   //Move them to output latch at one
   HC595_latch();
 218:	0e 94 8b 00 	call	0x116	; 0x116 <HC595_latch>
}
 21c:	00 00       	nop
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <io_init>:
 * Created: 20/11/2017 17:14:45
 * Author : admin
 */ 
#include "io.h"

void io_init() {
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62

	IO_ED0_PullUp_Enable();
 230:	82 e3       	ldi	r24, 0x32	; 50
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	22 e3       	ldi	r18, 0x32	; 50
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	f9 01       	movw	r30, r18
 23a:	20 81       	ld	r18, Z
 23c:	24 60       	ori	r18, 0x04	; 4
 23e:	fc 01       	movw	r30, r24
 240:	20 83       	st	Z, r18
	IO_ED1_PullUp_Enable();
 242:	82 e3       	ldi	r24, 0x32	; 50
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	22 e3       	ldi	r18, 0x32	; 50
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	f9 01       	movw	r30, r18
 24c:	20 81       	ld	r18, Z
 24e:	22 60       	ori	r18, 0x02	; 2
 250:	fc 01       	movw	r30, r24
 252:	20 83       	st	Z, r18
	IO_ED2_PullUp_Enable();
 254:	82 e3       	ldi	r24, 0x32	; 50
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	22 e3       	ldi	r18, 0x32	; 50
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	f9 01       	movw	r30, r18
 25e:	20 81       	ld	r18, Z
 260:	21 60       	ori	r18, 0x01	; 1
 262:	fc 01       	movw	r30, r24
 264:	20 83       	st	Z, r18
	
	IO_setup_ED0_Input();
 266:	80 e3       	ldi	r24, 0x30	; 48
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	20 e3       	ldi	r18, 0x30	; 48
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	f9 01       	movw	r30, r18
 270:	20 81       	ld	r18, Z
 272:	2b 7f       	andi	r18, 0xFB	; 251
 274:	fc 01       	movw	r30, r24
 276:	20 83       	st	Z, r18
 278:	82 e3       	ldi	r24, 0x32	; 50
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	22 e3       	ldi	r18, 0x32	; 50
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	f9 01       	movw	r30, r18
 282:	20 81       	ld	r18, Z
 284:	24 60       	ori	r18, 0x04	; 4
 286:	fc 01       	movw	r30, r24
 288:	20 83       	st	Z, r18
 28a:	81 e3       	ldi	r24, 0x31	; 49
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	21 e3       	ldi	r18, 0x31	; 49
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	f9 01       	movw	r30, r18
 294:	20 81       	ld	r18, Z
 296:	24 60       	ori	r18, 0x04	; 4
 298:	fc 01       	movw	r30, r24
 29a:	20 83       	st	Z, r18
 29c:	80 e3       	ldi	r24, 0x30	; 48
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	20 e3       	ldi	r18, 0x30	; 48
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	f9 01       	movw	r30, r18
 2a6:	20 81       	ld	r18, Z
 2a8:	20 62       	ori	r18, 0x20	; 32
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18
 2ae:	81 e3       	ldi	r24, 0x31	; 49
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	21 e3       	ldi	r18, 0x31	; 49
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	f9 01       	movw	r30, r18
 2b8:	20 81       	ld	r18, Z
 2ba:	2f 7d       	andi	r18, 0xDF	; 223
 2bc:	fc 01       	movw	r30, r24
 2be:	20 83       	st	Z, r18
	IO_setup_ED2_Input();
 2c0:	80 e3       	ldi	r24, 0x30	; 48
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	20 e3       	ldi	r18, 0x30	; 48
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	f9 01       	movw	r30, r18
 2ca:	20 81       	ld	r18, Z
 2cc:	2e 7f       	andi	r18, 0xFE	; 254
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18
 2d2:	88 e2       	ldi	r24, 0x28	; 40
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	28 e2       	ldi	r18, 0x28	; 40
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	f9 01       	movw	r30, r18
 2dc:	20 81       	ld	r18, Z
 2de:	22 60       	ori	r18, 0x02	; 2
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
 2e4:	89 e2       	ldi	r24, 0x29	; 41
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	29 e2       	ldi	r18, 0x29	; 41
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	f9 01       	movw	r30, r18
 2ee:	20 81       	ld	r18, Z
 2f0:	2d 7f       	andi	r18, 0xFD	; 253
 2f2:	fc 01       	movw	r30, r24
 2f4:	20 83       	st	Z, r18
	
	PUEC |= (1<<2);
 2f6:	8a e2       	ldi	r24, 0x2A	; 42
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	2a e2       	ldi	r18, 0x2A	; 42
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	f9 01       	movw	r30, r18
 300:	20 81       	ld	r18, Z
 302:	24 60       	ori	r18, 0x04	; 4
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
}
 308:	00 00       	nop
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <main>:
#include "ibutton.h"
#include "calamp_tracker.h"
#include "adc.h"
#include "timer0.h"

int main(void) {
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
 318:	6c 97       	sbiw	r28, 0x1c	; 28
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	f8 94       	cli
 31e:	de bf       	out	0x3e, r29	; 62
 320:	0f be       	out	0x3f, r0	; 63
 322:	cd bf       	out	0x3d, r28	; 61

	io_init();
 324:	0e 94 14 01 	call	0x228	; 0x228 <io_init>
	
	HC595_init();
 328:	0e 94 57 00 	call	0xae	; 0xae <HC595_init>
	HC595_write(HC595_Cleared);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <HC595_write>
	HC595_setPin(0);
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 a5 00 	call	0x14a	; 0x14a <HC595_setPin>
	HC595_setPin(1);
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0e 94 a5 00 	call	0x14a	; 0x14a <HC595_setPin>
	HC595_setPin(HC595_S0);
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 a5 00 	call	0x14a	; 0x14a <HC595_setPin>
	HC595_setPin(HC595_S2);
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	0e 94 a5 00 	call	0x14a	; 0x14a <HC595_setPin>

	USART1_Init(BAUD_115200);
 34a:	88 e0       	ldi	r24, 0x08	; 8
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 1f 03 	call	0x63e	; 0x63e <USART1_Init>
	
	adc_setPrescaler(ADC_CLOCK_DIV16);
 352:	83 e2       	ldi	r24, 0x23	; 35
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	23 e2       	ldi	r18, 0x23	; 35
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	f9 01       	movw	r30, r18
 35c:	20 81       	ld	r18, Z
 35e:	24 60       	ori	r18, 0x04	; 4
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
	adc_setReference(VCC);
 364:	84 e2       	ldi	r24, 0x24	; 36
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	24 e2       	ldi	r18, 0x24	; 36
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	f9 01       	movw	r30, r18
 36e:	20 81       	ld	r18, Z
 370:	fc 01       	movw	r30, r24
 372:	20 83       	st	Z, r18
	adc_enable();
 374:	83 e2       	ldi	r24, 0x23	; 35
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	23 e2       	ldi	r18, 0x23	; 35
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	f9 01       	movw	r30, r18
 37e:	20 81       	ld	r18, Z
 380:	20 68       	ori	r18, 0x80	; 128
 382:	fc 01       	movw	r30, r24
 384:	20 83       	st	Z, r18
	
	timer0_init();
 386:	0e 94 b3 02 	call	0x566	; 0x566 <timer0_init>
	
	sei();
 38a:	78 94       	sei
	timerCount = 0;
 38c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <timerCount>
	while(1) {
		HC595_setPin(HC595_S3);
 390:	83 e0       	ldi	r24, 0x03	; 3
 392:	0e 94 a5 00 	call	0x14a	; 0x14a <HC595_setPin>
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	aa e7       	ldi	r26, 0x7A	; 122
 39c:	b4 e4       	ldi	r27, 0x44	; 68
 39e:	89 83       	std	Y+1, r24	; 0x01
 3a0:	9a 83       	std	Y+2, r25	; 0x02
 3a2:	ab 83       	std	Y+3, r26	; 0x03
 3a4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	4a e7       	ldi	r20, 0x7A	; 122
 3ac:	53 e4       	ldi	r21, 0x43	; 67
 3ae:	69 81       	ldd	r22, Y+1	; 0x01
 3b0:	7a 81       	ldd	r23, Y+2	; 0x02
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	9c 81       	ldd	r25, Y+4	; 0x04
 3b6:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__mulsf3>
 3ba:	dc 01       	movw	r26, r24
 3bc:	cb 01       	movw	r24, r22
 3be:	8b 8b       	std	Y+19, r24	; 0x13
 3c0:	9c 8b       	std	Y+20, r25	; 0x14
 3c2:	ad 8b       	std	Y+21, r26	; 0x15
 3c4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	40 e8       	ldi	r20, 0x80	; 128
 3cc:	5f e3       	ldi	r21, 0x3F	; 63
 3ce:	6b 89       	ldd	r22, Y+19	; 0x13
 3d0:	7c 89       	ldd	r23, Y+20	; 0x14
 3d2:	8d 89       	ldd	r24, Y+21	; 0x15
 3d4:	9e 89       	ldd	r25, Y+22	; 0x16
 3d6:	0e 94 43 03 	call	0x686	; 0x686 <__cmpsf2>
 3da:	88 23       	and	r24, r24
 3dc:	2c f4       	brge	.+10     	; 0x3e8 <main+0xd8>
		__ticks = 1;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	98 8f       	std	Y+24, r25	; 0x18
 3e4:	8f 8b       	std	Y+23, r24	; 0x17
 3e6:	3f c0       	rjmp	.+126    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	else if (__tmp > 65535)
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	3f ef       	ldi	r19, 0xFF	; 255
 3ec:	4f e7       	ldi	r20, 0x7F	; 127
 3ee:	57 e4       	ldi	r21, 0x47	; 71
 3f0:	6b 89       	ldd	r22, Y+19	; 0x13
 3f2:	7c 89       	ldd	r23, Y+20	; 0x14
 3f4:	8d 89       	ldd	r24, Y+21	; 0x15
 3f6:	9e 89       	ldd	r25, Y+22	; 0x16
 3f8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__gesf2>
 3fc:	18 16       	cp	r1, r24
 3fe:	4c f5       	brge	.+82     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	40 e2       	ldi	r20, 0x20	; 32
 406:	51 e4       	ldi	r21, 0x41	; 65
 408:	69 81       	ldd	r22, Y+1	; 0x01
 40a:	7a 81       	ldd	r23, Y+2	; 0x02
 40c:	8b 81       	ldd	r24, Y+3	; 0x03
 40e:	9c 81       	ldd	r25, Y+4	; 0x04
 410:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__mulsf3>
 414:	dc 01       	movw	r26, r24
 416:	cb 01       	movw	r24, r22
 418:	bc 01       	movw	r22, r24
 41a:	cd 01       	movw	r24, r26
 41c:	0e 94 48 03 	call	0x690	; 0x690 <__fixunssfsi>
 420:	dc 01       	movw	r26, r24
 422:	cb 01       	movw	r24, r22
 424:	98 8f       	std	Y+24, r25	; 0x18
 426:	8f 8b       	std	Y+23, r24	; 0x17
 428:	0f c0       	rjmp	.+30     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 42a:	89 e1       	ldi	r24, 0x19	; 25
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	9a 8f       	std	Y+26, r25	; 0x1a
 430:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 432:	89 8d       	ldd	r24, Y+25	; 0x19
 434:	9a 8d       	ldd	r25, Y+26	; 0x1a
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43a:	9a 8f       	std	Y+26, r25	; 0x1a
 43c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 43e:	8f 89       	ldd	r24, Y+23	; 0x17
 440:	98 8d       	ldd	r25, Y+24	; 0x18
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	98 8f       	std	Y+24, r25	; 0x18
 446:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 448:	8f 89       	ldd	r24, Y+23	; 0x17
 44a:	98 8d       	ldd	r25, Y+24	; 0x18
 44c:	89 2b       	or	r24, r25
 44e:	69 f7       	brne	.-38     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 450:	14 c0       	rjmp	.+40     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 452:	6b 89       	ldd	r22, Y+19	; 0x13
 454:	7c 89       	ldd	r23, Y+20	; 0x14
 456:	8d 89       	ldd	r24, Y+21	; 0x15
 458:	9e 89       	ldd	r25, Y+22	; 0x16
 45a:	0e 94 48 03 	call	0x690	; 0x690 <__fixunssfsi>
 45e:	dc 01       	movw	r26, r24
 460:	cb 01       	movw	r24, r22
 462:	98 8f       	std	Y+24, r25	; 0x18
 464:	8f 8b       	std	Y+23, r24	; 0x17
 466:	8f 89       	ldd	r24, Y+23	; 0x17
 468:	98 8d       	ldd	r25, Y+24	; 0x18
 46a:	9c 8f       	std	Y+28, r25	; 0x1c
 46c:	8b 8f       	std	Y+27, r24	; 0x1b
 46e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 470:	9c 8d       	ldd	r25, Y+28	; 0x1c
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	f1 f7       	brne	.-4      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 476:	9c 8f       	std	Y+28, r25	; 0x1c
 478:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(1000);
		HC595_clrPin(HC595_S3);
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	0e 94 c4 00 	call	0x188	; 0x188 <HC595_clrPin>
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	aa e7       	ldi	r26, 0x7A	; 122
 486:	b4 e4       	ldi	r27, 0x44	; 68
 488:	8d 83       	std	Y+5, r24	; 0x05
 48a:	9e 83       	std	Y+6, r25	; 0x06
 48c:	af 83       	std	Y+7, r26	; 0x07
 48e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	4a e7       	ldi	r20, 0x7A	; 122
 496:	53 e4       	ldi	r21, 0x43	; 67
 498:	6d 81       	ldd	r22, Y+5	; 0x05
 49a:	7e 81       	ldd	r23, Y+6	; 0x06
 49c:	8f 81       	ldd	r24, Y+7	; 0x07
 49e:	98 85       	ldd	r25, Y+8	; 0x08
 4a0:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__mulsf3>
 4a4:	dc 01       	movw	r26, r24
 4a6:	cb 01       	movw	r24, r22
 4a8:	89 87       	std	Y+9, r24	; 0x09
 4aa:	9a 87       	std	Y+10, r25	; 0x0a
 4ac:	ab 87       	std	Y+11, r26	; 0x0b
 4ae:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 4b0:	20 e0       	ldi	r18, 0x00	; 0
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	40 e8       	ldi	r20, 0x80	; 128
 4b6:	5f e3       	ldi	r21, 0x3F	; 63
 4b8:	69 85       	ldd	r22, Y+9	; 0x09
 4ba:	7a 85       	ldd	r23, Y+10	; 0x0a
 4bc:	8b 85       	ldd	r24, Y+11	; 0x0b
 4be:	9c 85       	ldd	r25, Y+12	; 0x0c
 4c0:	0e 94 43 03 	call	0x686	; 0x686 <__cmpsf2>
 4c4:	88 23       	and	r24, r24
 4c6:	2c f4       	brge	.+10     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
		__ticks = 1;
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	9e 87       	std	Y+14, r25	; 0x0e
 4ce:	8d 87       	std	Y+13, r24	; 0x0d
 4d0:	3f c0       	rjmp	.+126    	; 0x550 <__stack+0x51>
	else if (__tmp > 65535)
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	3f ef       	ldi	r19, 0xFF	; 255
 4d6:	4f e7       	ldi	r20, 0x7F	; 127
 4d8:	57 e4       	ldi	r21, 0x47	; 71
 4da:	69 85       	ldd	r22, Y+9	; 0x09
 4dc:	7a 85       	ldd	r23, Y+10	; 0x0a
 4de:	8b 85       	ldd	r24, Y+11	; 0x0b
 4e0:	9c 85       	ldd	r25, Y+12	; 0x0c
 4e2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__gesf2>
 4e6:	18 16       	cp	r1, r24
 4e8:	4c f5       	brge	.+82     	; 0x53c <__stack+0x3d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	40 e2       	ldi	r20, 0x20	; 32
 4f0:	51 e4       	ldi	r21, 0x41	; 65
 4f2:	6d 81       	ldd	r22, Y+5	; 0x05
 4f4:	7e 81       	ldd	r23, Y+6	; 0x06
 4f6:	8f 81       	ldd	r24, Y+7	; 0x07
 4f8:	98 85       	ldd	r25, Y+8	; 0x08
 4fa:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__mulsf3>
 4fe:	dc 01       	movw	r26, r24
 500:	cb 01       	movw	r24, r22
 502:	bc 01       	movw	r22, r24
 504:	cd 01       	movw	r24, r26
 506:	0e 94 48 03 	call	0x690	; 0x690 <__fixunssfsi>
 50a:	dc 01       	movw	r26, r24
 50c:	cb 01       	movw	r24, r22
 50e:	9e 87       	std	Y+14, r25	; 0x0e
 510:	8d 87       	std	Y+13, r24	; 0x0d
 512:	0f c0       	rjmp	.+30     	; 0x532 <__stack+0x33>
 514:	89 e1       	ldi	r24, 0x19	; 25
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	98 8b       	std	Y+16, r25	; 0x10
 51a:	8f 87       	std	Y+15, r24	; 0x0f
 51c:	8f 85       	ldd	r24, Y+15	; 0x0f
 51e:	98 89       	ldd	r25, Y+16	; 0x10
 520:	01 97       	sbiw	r24, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <__stack+0x21>
 524:	98 8b       	std	Y+16, r25	; 0x10
 526:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 528:	8d 85       	ldd	r24, Y+13	; 0x0d
 52a:	9e 85       	ldd	r25, Y+14	; 0x0e
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	9e 87       	std	Y+14, r25	; 0x0e
 530:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 532:	8d 85       	ldd	r24, Y+13	; 0x0d
 534:	9e 85       	ldd	r25, Y+14	; 0x0e
 536:	89 2b       	or	r24, r25
 538:	69 f7       	brne	.-38     	; 0x514 <__stack+0x15>
 53a:	14 c0       	rjmp	.+40     	; 0x564 <__stack+0x65>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 53c:	69 85       	ldd	r22, Y+9	; 0x09
 53e:	7a 85       	ldd	r23, Y+10	; 0x0a
 540:	8b 85       	ldd	r24, Y+11	; 0x0b
 542:	9c 85       	ldd	r25, Y+12	; 0x0c
 544:	0e 94 48 03 	call	0x690	; 0x690 <__fixunssfsi>
 548:	dc 01       	movw	r26, r24
 54a:	cb 01       	movw	r24, r22
 54c:	9e 87       	std	Y+14, r25	; 0x0e
 54e:	8d 87       	std	Y+13, r24	; 0x0d
 550:	8d 85       	ldd	r24, Y+13	; 0x0d
 552:	9e 85       	ldd	r25, Y+14	; 0x0e
 554:	9a 8b       	std	Y+18, r25	; 0x12
 556:	89 8b       	std	Y+17, r24	; 0x11
 558:	89 89       	ldd	r24, Y+17	; 0x11
 55a:	9a 89       	ldd	r25, Y+18	; 0x12
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	f1 f7       	brne	.-4      	; 0x55c <__stack+0x5d>
 560:	9a 8b       	std	Y+18, r25	; 0x12
 562:	89 8b       	std	Y+17, r24	; 0x11
		_delay_ms(1000);
	}
 564:	15 cf       	rjmp	.-470    	; 0x390 <main+0x80>

00000566 <timer0_init>:
 * @version 1.0
 */

#include "timer0.h"

void timer0_init() {
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
	timer0_stop(); //Timer stopped
 56e:	8a e3       	ldi	r24, 0x3A	; 58
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	2a e3       	ldi	r18, 0x3A	; 58
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	f9 01       	movw	r30, r18
 578:	20 81       	ld	r18, Z
 57a:	fc 01       	movw	r30, r24
 57c:	20 83       	st	Z, r18
	timer0_setPreClock(TIMER0_CLKIO_BY_1024); //Prescalar 1024;
 57e:	8a e3       	ldi	r24, 0x3A	; 58
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	2a e3       	ldi	r18, 0x3A	; 58
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	f9 01       	movw	r30, r18
 588:	20 81       	ld	r18, Z
 58a:	25 60       	ori	r18, 0x05	; 5
 58c:	fc 01       	movw	r30, r24
 58e:	20 83       	st	Z, r18
	timer0_setCounter(TIMER0_OVERFLOW);
 590:	89 e3       	ldi	r24, 0x39	; 57
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	fc 01       	movw	r30, r24
 596:	10 82       	st	Z, r1
	timer0_enableOverFlowInt(); //enable timer0 overflow interrupt;
 598:	8a e5       	ldi	r24, 0x5A	; 90
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	2a e5       	ldi	r18, 0x5A	; 90
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	f9 01       	movw	r30, r18
 5a2:	20 81       	ld	r18, Z
 5a4:	22 60       	ori	r18, 0x02	; 2
 5a6:	fc 01       	movw	r30, r24
 5a8:	20 83       	st	Z, r18
}
 5aa:	00 00       	nop
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	08 95       	ret

000005b2 <__vector_12>:

ISR(TIMER0_OVF_vect) {
 5b2:	1f 92       	push	r1
 5b4:	0f 92       	push	r0
 5b6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 5ba:	0f 92       	push	r0
 5bc:	11 24       	eor	r1, r1
 5be:	8f 93       	push	r24
 5c0:	9f 93       	push	r25
 5c2:	ef 93       	push	r30
 5c4:	ff 93       	push	r31
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	cd b7       	in	r28, 0x3d	; 61
 5cc:	de b7       	in	r29, 0x3e	; 62
	timer0_setCounter(TIMER0_OVERFLOW);
 5ce:	89 e3       	ldi	r24, 0x39	; 57
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	fc 01       	movw	r30, r24
 5d4:	10 82       	st	Z, r1
	
	if (timeoutLoginEnable) {
 5d6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timeoutLoginEnable>
 5da:	88 23       	and	r24, r24
 5dc:	49 f0       	breq	.+18     	; 0x5f0 <__vector_12+0x3e>
		timeoutLogin++;
 5de:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timeoutLogin>
 5e2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <timeoutLogin+0x1>
 5e6:	01 96       	adiw	r24, 0x01	; 1
 5e8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <timeoutLogin+0x1>
 5ec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <timeoutLogin>
	}
	
	if (timeoutLogoutEnable) {
 5f0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timeoutLogoutEnable>
 5f4:	88 23       	and	r24, r24
 5f6:	49 f0       	breq	.+18     	; 0x60a <__vector_12+0x58>
		timeoutLogout++;
 5f8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timeoutLogout>
 5fc:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timeoutLogout+0x1>
 600:	01 96       	adiw	r24, 0x01	; 1
 602:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <timeoutLogout+0x1>
 606:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timeoutLogout>
	}
	
	if (timeoutWaitLoginEnable) {
 60a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <timeoutWaitLoginEnable>
 60e:	88 23       	and	r24, r24
 610:	49 f0       	breq	.+18     	; 0x624 <__vector_12+0x72>
		timeoutWaitLogin++;
 612:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timeoutWaitLogin>
 616:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timeoutWaitLogin+0x1>
 61a:	01 96       	adiw	r24, 0x01	; 1
 61c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timeoutWaitLogin+0x1>
 620:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timeoutWaitLogin>
	}
}
 624:	00 00       	nop
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	ff 91       	pop	r31
 62c:	ef 91       	pop	r30
 62e:	9f 91       	pop	r25
 630:	8f 91       	pop	r24
 632:	0f 90       	pop	r0
 634:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 638:	0f 90       	pop	r0
 63a:	1f 90       	pop	r1
 63c:	18 95       	reti

0000063e <USART1_Init>:
 }



void USART1_Init( unsigned int baud )
{
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	00 d0       	rcall	.+0      	; 0x644 <USART1_Init+0x6>
 644:	cd b7       	in	r28, 0x3d	; 61
 646:	de b7       	in	r29, 0x3e	; 62
 648:	9a 83       	std	Y+2, r25	; 0x02
 64a:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UBRR1H = (unsigned char)(baud>>8);
 64c:	85 e7       	ldi	r24, 0x75	; 117
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	29 81       	ldd	r18, Y+1	; 0x01
 652:	3a 81       	ldd	r19, Y+2	; 0x02
 654:	23 2f       	mov	r18, r19
 656:	33 27       	eor	r19, r19
 658:	fc 01       	movw	r30, r24
 65a:	20 83       	st	Z, r18
	UBRR1L = (unsigned char)baud;
 65c:	84 e7       	ldi	r24, 0x74	; 116
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	29 81       	ldd	r18, Y+1	; 0x01
 662:	fc 01       	movw	r30, r24
 664:	20 83       	st	Z, r18
	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 666:	88 e7       	ldi	r24, 0x78	; 120
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	28 e1       	ldi	r18, 0x18	; 24
 66c:	fc 01       	movw	r30, r24
 66e:	20 83       	st	Z, r18
	
	UCSR1A = (1 << U2X1);
 670:	89 e7       	ldi	r24, 0x79	; 121
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	22 e0       	ldi	r18, 0x02	; 2
 676:	fc 01       	movw	r30, r24
 678:	20 83       	st	Z, r18
	
}
 67a:	00 00       	nop
 67c:	0f 90       	pop	r0
 67e:	0f 90       	pop	r0
 680:	df 91       	pop	r29
 682:	cf 91       	pop	r28
 684:	08 95       	ret

00000686 <__cmpsf2>:
 686:	0e 94 77 03 	call	0x6ee	; 0x6ee <__fp_cmp>
 68a:	08 f4       	brcc	.+2      	; 0x68e <__cmpsf2+0x8>
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	08 95       	ret

00000690 <__fixunssfsi>:
 690:	0e 94 cb 03 	call	0x796	; 0x796 <__fp_splitA>
 694:	88 f0       	brcs	.+34     	; 0x6b8 <__fixunssfsi+0x28>
 696:	9f 57       	subi	r25, 0x7F	; 127
 698:	98 f0       	brcs	.+38     	; 0x6c0 <__fixunssfsi+0x30>
 69a:	b9 2f       	mov	r27, r25
 69c:	99 27       	eor	r25, r25
 69e:	b7 51       	subi	r27, 0x17	; 23
 6a0:	b0 f0       	brcs	.+44     	; 0x6ce <__fixunssfsi+0x3e>
 6a2:	e1 f0       	breq	.+56     	; 0x6dc <__fixunssfsi+0x4c>
 6a4:	66 0f       	add	r22, r22
 6a6:	77 1f       	adc	r23, r23
 6a8:	88 1f       	adc	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	1a f0       	brmi	.+6      	; 0x6b4 <__fixunssfsi+0x24>
 6ae:	ba 95       	dec	r27
 6b0:	c9 f7       	brne	.-14     	; 0x6a4 <__fixunssfsi+0x14>
 6b2:	14 c0       	rjmp	.+40     	; 0x6dc <__fixunssfsi+0x4c>
 6b4:	b1 30       	cpi	r27, 0x01	; 1
 6b6:	91 f0       	breq	.+36     	; 0x6dc <__fixunssfsi+0x4c>
 6b8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_zero>
 6bc:	b1 e0       	ldi	r27, 0x01	; 1
 6be:	08 95       	ret
 6c0:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_zero>
 6c4:	67 2f       	mov	r22, r23
 6c6:	78 2f       	mov	r23, r24
 6c8:	88 27       	eor	r24, r24
 6ca:	b8 5f       	subi	r27, 0xF8	; 248
 6cc:	39 f0       	breq	.+14     	; 0x6dc <__fixunssfsi+0x4c>
 6ce:	b9 3f       	cpi	r27, 0xF9	; 249
 6d0:	cc f3       	brlt	.-14     	; 0x6c4 <__fixunssfsi+0x34>
 6d2:	86 95       	lsr	r24
 6d4:	77 95       	ror	r23
 6d6:	67 95       	ror	r22
 6d8:	b3 95       	inc	r27
 6da:	d9 f7       	brne	.-10     	; 0x6d2 <__fixunssfsi+0x42>
 6dc:	3e f4       	brtc	.+14     	; 0x6ec <__fixunssfsi+0x5c>
 6de:	90 95       	com	r25
 6e0:	80 95       	com	r24
 6e2:	70 95       	com	r23
 6e4:	61 95       	neg	r22
 6e6:	7f 4f       	sbci	r23, 0xFF	; 255
 6e8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ea:	9f 4f       	sbci	r25, 0xFF	; 255
 6ec:	08 95       	ret

000006ee <__fp_cmp>:
 6ee:	99 0f       	add	r25, r25
 6f0:	00 08       	sbc	r0, r0
 6f2:	55 0f       	add	r21, r21
 6f4:	aa 0b       	sbc	r26, r26
 6f6:	e0 e8       	ldi	r30, 0x80	; 128
 6f8:	fe ef       	ldi	r31, 0xFE	; 254
 6fa:	16 16       	cp	r1, r22
 6fc:	17 06       	cpc	r1, r23
 6fe:	e8 07       	cpc	r30, r24
 700:	f9 07       	cpc	r31, r25
 702:	c0 f0       	brcs	.+48     	; 0x734 <__fp_cmp+0x46>
 704:	12 16       	cp	r1, r18
 706:	13 06       	cpc	r1, r19
 708:	e4 07       	cpc	r30, r20
 70a:	f5 07       	cpc	r31, r21
 70c:	98 f0       	brcs	.+38     	; 0x734 <__fp_cmp+0x46>
 70e:	62 1b       	sub	r22, r18
 710:	73 0b       	sbc	r23, r19
 712:	84 0b       	sbc	r24, r20
 714:	95 0b       	sbc	r25, r21
 716:	39 f4       	brne	.+14     	; 0x726 <__fp_cmp+0x38>
 718:	0a 26       	eor	r0, r26
 71a:	61 f0       	breq	.+24     	; 0x734 <__fp_cmp+0x46>
 71c:	23 2b       	or	r18, r19
 71e:	24 2b       	or	r18, r20
 720:	25 2b       	or	r18, r21
 722:	21 f4       	brne	.+8      	; 0x72c <__fp_cmp+0x3e>
 724:	08 95       	ret
 726:	0a 26       	eor	r0, r26
 728:	09 f4       	brne	.+2      	; 0x72c <__fp_cmp+0x3e>
 72a:	a1 40       	sbci	r26, 0x01	; 1
 72c:	a6 95       	lsr	r26
 72e:	8f ef       	ldi	r24, 0xFF	; 255
 730:	81 1d       	adc	r24, r1
 732:	81 1d       	adc	r24, r1
 734:	08 95       	ret

00000736 <__fp_inf>:
 736:	97 f9       	bld	r25, 7
 738:	9f 67       	ori	r25, 0x7F	; 127
 73a:	80 e8       	ldi	r24, 0x80	; 128
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	60 e0       	ldi	r22, 0x00	; 0
 740:	08 95       	ret

00000742 <__fp_nan>:
 742:	9f ef       	ldi	r25, 0xFF	; 255
 744:	80 ec       	ldi	r24, 0xC0	; 192
 746:	08 95       	ret

00000748 <__fp_pscA>:
 748:	00 24       	eor	r0, r0
 74a:	0a 94       	dec	r0
 74c:	16 16       	cp	r1, r22
 74e:	17 06       	cpc	r1, r23
 750:	18 06       	cpc	r1, r24
 752:	09 06       	cpc	r0, r25
 754:	08 95       	ret

00000756 <__fp_pscB>:
 756:	00 24       	eor	r0, r0
 758:	0a 94       	dec	r0
 75a:	12 16       	cp	r1, r18
 75c:	13 06       	cpc	r1, r19
 75e:	14 06       	cpc	r1, r20
 760:	05 06       	cpc	r0, r21
 762:	08 95       	ret

00000764 <__fp_round>:
 764:	09 2e       	mov	r0, r25
 766:	03 94       	inc	r0
 768:	00 0c       	add	r0, r0
 76a:	11 f4       	brne	.+4      	; 0x770 <__fp_round+0xc>
 76c:	88 23       	and	r24, r24
 76e:	52 f0       	brmi	.+20     	; 0x784 <__fp_round+0x20>
 770:	bb 0f       	add	r27, r27
 772:	40 f4       	brcc	.+16     	; 0x784 <__fp_round+0x20>
 774:	bf 2b       	or	r27, r31
 776:	11 f4       	brne	.+4      	; 0x77c <__fp_round+0x18>
 778:	60 ff       	sbrs	r22, 0
 77a:	04 c0       	rjmp	.+8      	; 0x784 <__fp_round+0x20>
 77c:	6f 5f       	subi	r22, 0xFF	; 255
 77e:	7f 4f       	sbci	r23, 0xFF	; 255
 780:	8f 4f       	sbci	r24, 0xFF	; 255
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	08 95       	ret

00000786 <__fp_split3>:
 786:	57 fd       	sbrc	r21, 7
 788:	90 58       	subi	r25, 0x80	; 128
 78a:	44 0f       	add	r20, r20
 78c:	55 1f       	adc	r21, r21
 78e:	59 f0       	breq	.+22     	; 0x7a6 <__fp_splitA+0x10>
 790:	5f 3f       	cpi	r21, 0xFF	; 255
 792:	71 f0       	breq	.+28     	; 0x7b0 <__fp_splitA+0x1a>
 794:	47 95       	ror	r20

00000796 <__fp_splitA>:
 796:	88 0f       	add	r24, r24
 798:	97 fb       	bst	r25, 7
 79a:	99 1f       	adc	r25, r25
 79c:	61 f0       	breq	.+24     	; 0x7b6 <__fp_splitA+0x20>
 79e:	9f 3f       	cpi	r25, 0xFF	; 255
 7a0:	79 f0       	breq	.+30     	; 0x7c0 <__fp_splitA+0x2a>
 7a2:	87 95       	ror	r24
 7a4:	08 95       	ret
 7a6:	12 16       	cp	r1, r18
 7a8:	13 06       	cpc	r1, r19
 7aa:	14 06       	cpc	r1, r20
 7ac:	55 1f       	adc	r21, r21
 7ae:	f2 cf       	rjmp	.-28     	; 0x794 <__fp_split3+0xe>
 7b0:	46 95       	lsr	r20
 7b2:	f1 df       	rcall	.-30     	; 0x796 <__fp_splitA>
 7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <__fp_splitA+0x30>
 7b6:	16 16       	cp	r1, r22
 7b8:	17 06       	cpc	r1, r23
 7ba:	18 06       	cpc	r1, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	f1 cf       	rjmp	.-30     	; 0x7a2 <__fp_splitA+0xc>
 7c0:	86 95       	lsr	r24
 7c2:	71 05       	cpc	r23, r1
 7c4:	61 05       	cpc	r22, r1
 7c6:	08 94       	sec
 7c8:	08 95       	ret

000007ca <__fp_zero>:
 7ca:	e8 94       	clt

000007cc <__fp_szero>:
 7cc:	bb 27       	eor	r27, r27
 7ce:	66 27       	eor	r22, r22
 7d0:	77 27       	eor	r23, r23
 7d2:	cb 01       	movw	r24, r22
 7d4:	97 f9       	bld	r25, 7
 7d6:	08 95       	ret

000007d8 <__gesf2>:
 7d8:	0e 94 77 03 	call	0x6ee	; 0x6ee <__fp_cmp>
 7dc:	08 f4       	brcc	.+2      	; 0x7e0 <__gesf2+0x8>
 7de:	8f ef       	ldi	r24, 0xFF	; 255
 7e0:	08 95       	ret

000007e2 <__mulsf3>:
 7e2:	0e 94 03 04 	call	0x806	; 0x806 <__mulsf3x>
 7e6:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_round>
 7ea:	0e 94 a4 03 	call	0x748	; 0x748 <__fp_pscA>
 7ee:	38 f0       	brcs	.+14     	; 0x7fe <__mulsf3+0x1c>
 7f0:	0e 94 ab 03 	call	0x756	; 0x756 <__fp_pscB>
 7f4:	20 f0       	brcs	.+8      	; 0x7fe <__mulsf3+0x1c>
 7f6:	95 23       	and	r25, r21
 7f8:	11 f0       	breq	.+4      	; 0x7fe <__mulsf3+0x1c>
 7fa:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_inf>
 7fe:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_nan>
 802:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>

00000806 <__mulsf3x>:
 806:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_split3>
 80a:	78 f3       	brcs	.-34     	; 0x7ea <__mulsf3+0x8>

0000080c <__mulsf3_pse>:
 80c:	99 23       	and	r25, r25
 80e:	c9 f3       	breq	.-14     	; 0x802 <__mulsf3+0x20>
 810:	55 23       	and	r21, r21
 812:	b9 f3       	breq	.-18     	; 0x802 <__mulsf3+0x20>
 814:	95 0f       	add	r25, r21
 816:	50 e0       	ldi	r21, 0x00	; 0
 818:	55 1f       	adc	r21, r21
 81a:	aa 27       	eor	r26, r26
 81c:	ee 27       	eor	r30, r30
 81e:	ff 27       	eor	r31, r31
 820:	bb 27       	eor	r27, r27
 822:	00 24       	eor	r0, r0
 824:	08 94       	sec
 826:	67 95       	ror	r22
 828:	20 f4       	brcc	.+8      	; 0x832 <__mulsf3_pse+0x26>
 82a:	e2 0f       	add	r30, r18
 82c:	f3 1f       	adc	r31, r19
 82e:	b4 1f       	adc	r27, r20
 830:	0a 1e       	adc	r0, r26
 832:	22 0f       	add	r18, r18
 834:	33 1f       	adc	r19, r19
 836:	44 1f       	adc	r20, r20
 838:	aa 1f       	adc	r26, r26
 83a:	66 95       	lsr	r22
 83c:	a9 f7       	brne	.-22     	; 0x828 <__mulsf3_pse+0x1c>
 83e:	77 95       	ror	r23
 840:	30 f4       	brcc	.+12     	; 0x84e <__mulsf3_pse+0x42>
 842:	f3 0f       	add	r31, r19
 844:	b4 1f       	adc	r27, r20
 846:	0a 1e       	adc	r0, r26
 848:	12 1e       	adc	r1, r18
 84a:	08 f4       	brcc	.+2      	; 0x84e <__mulsf3_pse+0x42>
 84c:	63 95       	inc	r22
 84e:	33 0f       	add	r19, r19
 850:	44 1f       	adc	r20, r20
 852:	aa 1f       	adc	r26, r26
 854:	22 1f       	adc	r18, r18
 856:	76 95       	lsr	r23
 858:	99 f7       	brne	.-26     	; 0x840 <__mulsf3_pse+0x34>
 85a:	87 95       	ror	r24
 85c:	20 f4       	brcc	.+8      	; 0x866 <__mulsf3_pse+0x5a>
 85e:	b4 0f       	add	r27, r20
 860:	0a 1e       	adc	r0, r26
 862:	12 1e       	adc	r1, r18
 864:	63 1f       	adc	r22, r19
 866:	44 0f       	add	r20, r20
 868:	aa 1f       	adc	r26, r26
 86a:	22 1f       	adc	r18, r18
 86c:	33 1f       	adc	r19, r19
 86e:	86 95       	lsr	r24
 870:	a9 f7       	brne	.-22     	; 0x85c <__mulsf3_pse+0x50>
 872:	86 2f       	mov	r24, r22
 874:	71 2d       	mov	r23, r1
 876:	60 2d       	mov	r22, r0
 878:	11 24       	eor	r1, r1
 87a:	9f 57       	subi	r25, 0x7F	; 127
 87c:	50 40       	sbci	r21, 0x00	; 0
 87e:	9a f0       	brmi	.+38     	; 0x8a6 <__mulsf3_pse+0x9a>
 880:	f1 f0       	breq	.+60     	; 0x8be <__mulsf3_pse+0xb2>
 882:	88 23       	and	r24, r24
 884:	4a f0       	brmi	.+18     	; 0x898 <__mulsf3_pse+0x8c>
 886:	ee 0f       	add	r30, r30
 888:	ff 1f       	adc	r31, r31
 88a:	bb 1f       	adc	r27, r27
 88c:	66 1f       	adc	r22, r22
 88e:	77 1f       	adc	r23, r23
 890:	88 1f       	adc	r24, r24
 892:	91 50       	subi	r25, 0x01	; 1
 894:	50 40       	sbci	r21, 0x00	; 0
 896:	a9 f7       	brne	.-22     	; 0x882 <__mulsf3_pse+0x76>
 898:	9e 3f       	cpi	r25, 0xFE	; 254
 89a:	51 05       	cpc	r21, r1
 89c:	80 f0       	brcs	.+32     	; 0x8be <__mulsf3_pse+0xb2>
 89e:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_inf>
 8a2:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>
 8a6:	5f 3f       	cpi	r21, 0xFF	; 255
 8a8:	e4 f3       	brlt	.-8      	; 0x8a2 <__mulsf3_pse+0x96>
 8aa:	98 3e       	cpi	r25, 0xE8	; 232
 8ac:	d4 f3       	brlt	.-12     	; 0x8a2 <__mulsf3_pse+0x96>
 8ae:	86 95       	lsr	r24
 8b0:	77 95       	ror	r23
 8b2:	67 95       	ror	r22
 8b4:	b7 95       	ror	r27
 8b6:	f7 95       	ror	r31
 8b8:	e7 95       	ror	r30
 8ba:	9f 5f       	subi	r25, 0xFF	; 255
 8bc:	c1 f7       	brne	.-16     	; 0x8ae <__mulsf3_pse+0xa2>
 8be:	fe 2b       	or	r31, r30
 8c0:	88 0f       	add	r24, r24
 8c2:	91 1d       	adc	r25, r1
 8c4:	96 95       	lsr	r25
 8c6:	87 95       	ror	r24
 8c8:	97 f9       	bld	r25, 7
 8ca:	08 95       	ret

000008cc <_exit>:
 8cc:	f8 94       	cli

000008ce <__stop_program>:
 8ce:	ff cf       	rjmp	.-2      	; 0x8ce <__stop_program>
